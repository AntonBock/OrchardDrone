#include <ros/ros.h>
#include <sstream>
#include <tf/tf.h>
#include <actionlib/server/simple_action_server.h>
#include <actionlib/client/simple_action_client.h>
#include <vector>

#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Pose.h>
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/TwistStamped.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>

#include <hector_uav_msgs/PoseAction.h>
#include <hector_uav_msgs/EnableMotors.h>

#include <cmath>

ros::Publisher pub;

std::string world = "world";

std::vector<std::vector<double>> cord{
{0, 0, 2.5, 0.707, 0.707},
{0, 2, 2.5, 0.707, 0.707},
{0, 4, 2.5, 0.707, 0.707},
{0, 6, 2.5, 0.707, 0.707},
{0, 8, 2.5, 0.707, 0.707},
{0, 10, 2.5, 0.707, 0.707},
{0, 12, 2.5, 0.707, 0.707},
{0, 14, 2.5, 0.707, 0.707},
{0, 16, 2.5, 0.707, 0.707},
{0, 18, 2.5, 0.707, 0.707},
{0, 20, 2.5, 0.707, 0.707},
{0, 22, 2.5, 0.707, 0.707},
{0, 24, 2.5, 0.707, 0.707},
{2, 24, 2.5, 0.707, -0.707},
{2, 22, 2.5, 0.707, -0.707},
{2, 20, 2.5, 0.707, -0.707},
{2, 18, 2.5, 0.707, -0.707},
{2, 16, 2.5, 0.707, -0.707},
{2, 14, 2.5, 0.707, -0.707},
{2, 12, 2.5, 0.707, -0.707},
{2, 10, 2.5, 0.707, -0.707},
{2, 8, 2.5, 0.707, -0.707},
{2, 6, 2.5, 0.707, -0.707},
{2, 4, 2.5, 0.707, -0.707},
{2, 2, 2.5, 0.707, -0.707},
{2, 0, 2.5, 0.707, -0.707},
{4, 0, 2.5, 0.707, 0.707},
{4, 2, 2.5, 0.707, 0.707},
{4, 4, 2.5, 0.707, 0.707},
{4, 6, 2.5, 0.707, 0.707},
{4, 8, 2.5, 0.707, 0.707},
{4, 10, 2.5, 0.707, 0.707},
{4, 12, 2.5, 0.707, 0.707},
{4, 14, 2.5, 0.707, 0.707},
{4, 16, 2.5, 0.707, 0.707},
{4, 18, 2.5, 0.707, 0.707},
{4, 20, 2.5, 0.707, 0.707},
{4, 22, 2.5, 0.707, 0.707},
{4, 24, 2.5, 0.707, 0.707},
{6, 24, 2.5, 0.707, -0.707},
{6, 22, 2.5, 0.707, -0.707},
{6, 20, 2.5, 0.707, -0.707},
{6, 18, 2.5, 0.707, -0.707},
{6, 16, 2.5, 0.707, -0.707},
{6, 14, 2.5, 0.707, -0.707},
{6, 12, 2.5, 0.707, -0.707},
{6, 10, 2.5, 0.707, -0.707},
{6, 8, 2.5, 0.707, -0.707},
{6, 6, 2.5, 0.707, -0.707},
{6, 4, 2.5, 0.707, -0.707},
{6, 2, 2.5, 0.707, -0.707},
{6, 0, 2.5, 0.707, -0.707},
{8, 0, 2.5, 0.707, 0.707},
{8, 2, 2.5, 0.707, 0.707},
{8, 4, 2.5, 0.707, 0.707},
{8, 6, 2.5, 0.707, 0.707},
{8, 8, 2.5, 0.707, 0.707},
{8, 10, 2.5, 0.707, 0.707},
{8, 12, 2.5, 0.707, 0.707},
{8, 14, 2.5, 0.707, 0.707},
{8, 16, 2.5, 0.707, 0.707},
{8, 18, 2.5, 0.707, 0.707},
{8, 20, 2.5, 0.707, 0.707},
{8, 22, 2.5, 0.707, 0.707},
{8, 24, 2.5, 0.707, 0.707},
{10,24, 2.5, 0.707, -0.707},
{10,22, 2.5, 0.707, -0.707},
{10,20, 2.5, 0.707, -0.707},
{10,18, 2.5, 0.707, -0.707},
{10,16, 2.5, 0.707, -0.707},
{10,14, 2.5, 0.707, -0.707},
{10,12, 2.5, 0.707, -0.707},
{10,10, 2.5, 0.707, -0.707},
{10,8, 2.5, 0.707, -0.707},
{10,6, 2.5, 0.707, -0.707},
{10,4, 2.5, 0.707, -0.707},
{10,2, 2.5, 0.707, -0.707},
{10,0, 2.5, 0.707, -0.707},
{12,0, 2.5, 0.707, 0.707},
{12,2, 2.5, 0.707, 0.707},
{12,4, 2.5, 0.707, 0.707},
{12,6, 2.5, 0.707, 0.707},
{12,8, 2.5, 0.707, 0.707},
{12,10, 2.5, 0.707, 0.707},
{12,12, 2.5, 0.707, 0.707},
{12,14, 2.5, 0.707, 0.707},
{12,16, 2.5, 0.707, 0.707},
{12,18, 2.5, 0.707, 0.707},
{12,20, 2.5, 0.707, 0.707},
{12,22, 2.5, 0.707, 0.707},
{12,24, 2.5, 0.707, 0.707},
{14,24, 2.5, 0.707, -0.707},
{14,22, 2.5, 0.707, -0.707},
{14,20, 2.5, 0.707, -0.707},
{14,18, 2.5, 0.707, -0.707},
{14,16, 2.5, 0.707, -0.707},
{14,14, 2.5, 0.707, -0.707},
{14,12, 2.5, 0.707, -0.707},
{14,10, 2.5, 0.707, -0.707},
{14,8, 2.5, 0.707, -0.707},
{14,6, 2.5, 0.707, -0.707},
{14,4, 2.5, 0.707, -0.707},
{14,2, 2.5, 0.707, -0.707},
{14,0, 2.5, 0.707, -0.707},
{16, 0, 2.5, 0.707, 0.707 },
{ 16,2, 2.5, 0.707, 0.707 },
{ 16,4, 2.5, 0.707, 0.707 },
{ 16,6, 2.5, 0.707, 0.707 },
{ 16,8, 2.5, 0.707, 0.707 },
{ 16,10, 2.5, 0.707, 0.707 },
{ 16,12, 2.5, 0.707, 0.707 },
{ 16,14, 2.5, 0.707, 0.707 },
{ 16,16, 2.5, 0.707, 0.707 },
{ 16,18, 2.5, 0.707, 0.707 },
{ 16,20, 2.5, 0.707, 0.707 },
{ 16,22, 2.5, 0.707, 0.707 },
{ 16,24, 2.5, 0.707, 0.707 },
{ 18,24, 2.5, 0.707, -0.707 },
{ 18,22, 2.5, 0.707, -0.707 },
{ 18,20, 2.5, 0.707, -0.707 },
{ 18,18, 2.5, 0.707, -0.707 },
{ 18,16, 2.5, 0.707, -0.707 },
{ 18,14, 2.5, 0.707, -0.707 },
{ 18,12, 2.5, 0.707, -0.707 },
{ 18,10, 2.5, 0.707, -0.707 },
{ 18,8, 2.5, 0.707, -0.707 },
{ 18,6, 2.5, 0.707, -0.707 },
{ 18,4, 2.5, 0.707, -0.707 },
{ 18,2, 2.5, 0.707, -0.707 },
{ 18,0, 2.5, 0.707, -0.707 },
{ 20,0, 2.5, 0.707, 0.707 },
{ 20,2, 2.5, 0.707, 0.707 },
{ 20,4, 2.5, 0.707, 0.707 },
{ 20,6, 2.5, 0.707, 0.707 },
{ 20,8, 2.5, 0.707, 0.707 },
{ 20,10, 2.5, 0.707, 0.707 },
{ 20,12, 2.5, 0.707, 0.707 },
{ 20,14, 2.5, 0.707, 0.707 },
{ 20,16, 2.5, 0.707, 0.707 },
{ 20,18, 2.5, 0.707, 0.707 },
{ 20,20, 2.5, 0.707, 0.707 },
{ 20,22, 2.5, 0.707, 0.707 },
{ 20,24, 2.5, 0.707, 0.707 },
{ 22,24, 2.5, 0.707, -0.707 },
{ 22,22, 2.5, 0.707, -0.707 },
{ 22,20, 2.5, 0.707, -0.707 },
{ 22,18, 2.5, 0.707, -0.707 },
{ 22,16, 2.5, 0.707, -0.707 },
{ 22,14, 2.5, 0.707, -0.707 },
{ 22,12, 2.5, 0.707, -0.707 },
{ 22,10, 2.5, 0.707, -0.707 },
{ 22,8, 2.5, 0.707, -0.707 },
{ 22,6, 2.5, 0.707, -0.707 },
{ 22,4, 2.5, 0.707, -0.707 },
{ 22,2, 2.5, 0.707, -0.707 },
{ 22,0, 2.5, 0.707, -0.707 },
{ 24,0, 2.5, 0.707, 0.707 },
{ 24,2, 2.5, 0.707, 0.707 },
{ 24,4, 2.5, 0.707, 0.707 },
{ 24,6, 2.5, 0.707, 0.707 },
{ 24,8, 2.5, 0.707, 0.707 },
{ 24,10, 2.5, 0.707, 0.707 },
{ 24,12, 2.5, 0.707, 0.707 },
{ 24,14, 2.5, 0.707, 0.707 },
{ 24,16, 2.5, 0.707, 0.707 },
{ 24,18, 2.5, 0.707, 0.707 },
{ 24,20, 2.5, 0.707, 0.707 },
{ 24,22, 2.5, 0.707, 0.707 },
{ 24,24, 2.5, 0.707, 0.707 }};

hector_uav_msgs::PoseActionGoal tempGoal;

int main(int argc, char* argv[])
{
  ros::init(argc, argv, "send_waypoints");
  ros::NodeHandle nh;

  ros::ServiceClient motor_enable_service;
  motor_enable_service = nh.serviceClient<hector_uav_msgs::EnableMotors>("/enable_motors");
  hector_uav_msgs::EnableMotors srv;
  srv.request.enable = true;
  motor_enable_service.call(srv);

  ros::Rate loop_rate(10);

  while(ros::ok())
  {
  for(int i = 0; i < cord.size(); i++){
      tempGoal.goal.target_pose.header.frame_id = world;
      tempGoal.goal.target_pose.header.stamp = ros::Time::now();
      tempGoal.goal.target_pose.pose.position.x = cord[i][0];
      tempGoal.goal.target_pose.pose.position.y = cord[i][1];
      tempGoal.goal.target_pose.pose.position.z = cord[i][2];
      tempGoal.goal.target_pose.pose.orientation.w = cord[i][3];
      tempGoal.goal.target_pose.pose.orientation.z = cord[i][4];
      pub = nh.advertise<hector_uav_msgs::PoseActionGoal>("/action/pose/goal", 1);
      pub.publish(tempGoal);
      ros::spinOnce();
      loop_rate.sleep();
      ros::Duration(4.0).sleep();
      }
    ROS_INFO("DONE");
    return 0;
  }
}

/*
ros@ubuntu:~/catkin_ws$ rostopic pub /action/pose/goal hector_uav_msgs/PoseActionGoal "header:
  seq: 0
  stamp:
    secs: 0
    nsecs: 0
  frame_id: ''
goal_id:
  stamp:
    secs: 0
    nsecs: 0
  id: ''
goal:
  target_pose:
    header:
      seq: 0
      stamp:
        secs: 0
        nsecs: 0
      frame_id: 'world'
    pose:
      position:
        x: 0.0
        y: 0.0
        z: 2.0
      orientation:
        x: 0.0
        y: 0.0
        z: 0.0
        w: 0.0"
*/


// actionlib::SimpleActionClient<hector_uav_msgs::PoseAction> ac("waypointClient", true);
// ac.waitForServer();



/* Action client message:
  geometry_msgs::PoseStamped pose;
  pose.header.stamp = ros::Time::now();
  pose.header.frame_id = world;
  pose.pose.position.x = x_goal;
  pose.pose.position.y = y_goal;
  pose.pose.position.z = z_goal;

  tf2::Quaternion q;
  q.setRPY(roll, pitch, yaw);
  pose.pose.orientation = tf2::toMsg(q);

  hector_uav_msgs::PoseGoal goal;
  goal.target_pose = pose;
  ac.sendGoal(goal);
*/
